// SPRingboard
// Copyright (c) 2017 SPRI, LLC <info@spr.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.


/// Result of an asynchronous operation. 
/// 
/// Since asynchronous operations cannot make use of Swift's built-in error 
/// handling using `throws`, it is necessary for asynchronous completion 
/// handlers to accept both successful outcomes and errors indicating failure. 
/// 
/// Older asynchronous APIs, and APIs that must interoperate with Objective-C, 
/// support this by specifying that the completion handler have two (or more) 
/// parameters: one Optional error parameter that is set upon failure and the 
/// remaining Optional parameters set upon success. The completion handler must 
/// check if error is `nil` before processing the other parameters, and it is 
/// common to find implementations that skip that check and erroneously assume 
/// that when the remaining parameters are not `nil` the result was success. 
/// 
/// Swift's enumerations support associated types, which allows the 
/// asynchronous operation to unambiguously specify if it completed 
/// successfully or failed due to an error. Encapsulating the result of an 
/// asynchronous operation in an enumeration makes it easy for completion 
/// handlers to properly implement checking for success or failure. 
public enum Result<T>: CustomDebugStringConvertible {
    public enum Error: Swift.Error {
        case missingValueAndError
    }

    /// The operation successfully completed. The resulting value is available 
    /// as the associated value.
    case success(T)
    
    /// The operation failed. The error that caused the failure us available as 
    /// the associated value. 
    case failure(Swift.Error)
    
    public var debugDescription: String {
        let prefix: String
        let content: String
        
        switch self {
        case .success(let value):
            prefix = ".success"
            content = String(reflecting: value)
        case .failure(let error):
            prefix = ".failure"
            content = String(reflecting: error)
        }
        let string = "Result(\(prefix):\(content))"
        return string
    }
    
    /// Convenient way to create a `Result` from the parameters passed to a 
    /// traditional asynchronous completion handler. 
    /// 
    /// - Parameters: 
    ///     - value: The value generated by successful completion of the 
    ///       asynchronous task.
    ///     - error: The error that prevented the task to complete 
    ///       successfully. 
    /// - Throws: `Result.Error.missingValueAndError` when both `value` and 
    ///   `error` are `nil`.
    public init(value: T?, error: Swift.Error?) throws {
        if let error = error {
            self = .failure(error)
        } else if let value = value {
            self = .success(value)
        } else {
            throw Error.missingValueAndError
        }
    }
}
