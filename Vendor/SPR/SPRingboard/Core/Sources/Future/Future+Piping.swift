// SPRingboard
// Copyright (c) 2017 SPRI, LLC <info@spr.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
// IN THE SOFTWARE.

import Dispatch
import Foundation


fileprivate let uponQueue = DispatchQueue.global(qos: .utility)


/// Real-world business apps often perform a sequence of steps using the output 
/// of the previous step as the input to the current step. By tradition, this 
/// is called "piping" in reference to the UNIX pipe operator. 
/// 
/// The methods in this extension make it easy to pipe together synchronous and 
/// asynchronous tasks, accessing the output as a future. 
public extension Future {

    /// Execute the provided closure with the receiver's value, generating a
    /// new future that fills when the closure's future fills. 
    /// 
    /// Example:
    /// 
    ///     func geocodeAddress(_ address: String) -> Future<Geolocation> {
    ///         // ...
    ///     }
    ///     
    ///     func findStoresNearby(location: Geolocation) -> Future<[Store]> {
    ///         // ...
    ///     }
    ///     
    ///     let stores: Future<[Store]> = geocodeAddress("233 S Wacker Dr, Chicago")
    ///                                   .then(findStoresNearby(location:))
    /// 
    /// - Parameters: 
    ///     - upon: The `DispatchQueue` upon which the next step will be 
    ///       executed. Defaults to the main queue.
    ///     - into: A closure returning a future for the value it will 
    ///       generate after asynchronously processing the receiver's value. 
    /// - Returns: A future that will fill with the value of the closure's 
    ///   future after the receiver fills, the closure is executed, and the 
    ///   closure's future fills. 
    public func pipe<NextValue>(into nextStep: @escaping (Value) -> Future<NextValue>) -> Future<NextValue> {
        let deferred = Deferred<NextValue>()
        
        let block = { (value: Value) in
            let nextFuture = nextStep(value)
            nextFuture.then { deferred.fill(value: $0) }
        }
        self.then(upon: uponQueue, run: block)
        
        return deferred
    }

    /// Execute the provided closure with the receiver's value, generating a
    /// new future that fills with the output of the closure.
    ///
    /// Example:
    ///
    ///     func loadTemperatureFInRoom(_ roomID: Int) -> Future<Int> {
    ///         // ...
    ///     }
    ///
    ///     func convertToCelcius(fahrenheit: Int) -> Double {
    ///         let celcius = (fahrenheit - 32.0) * 5.0 / 9.0
    ///         return celcius
    ///     }
    ///
    ///     let celcius: Future<Double> = loadTemperatureFInRoom(123)
    ///                                   .transform(with: convertToCelcius(fahrenheit:))
    ///
    /// - Parameters:
    ///     - with: A closure that performs work on the value that fills the
    ///       receiver and returns another value.
    /// - Returns: A future that will fill with the value generated by the
    ///   closure when executed with the value filling the receiver.
    public func transform<NextValue>(with nextStep: @escaping (Value) -> NextValue) -> Future<NextValue> {
        let deferred = Deferred<NextValue>()
        
        let block = { (value: Value) in
            let nextValue = nextStep(value)
            deferred.fill(value: nextValue)
        }
        self.then(upon: uponQueue, run: block)
        
        return deferred
    }
    
}
